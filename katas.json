{
  "katas": [
    {
      "title": "Add Two Numbers",
      "slug": "add-two-numbers",
      "description": "Return the sum of two integers.",
      "visible_skeleton": "func Add(a int, b int) int {\n    return 0\n}\n",
      "test_cases": [
        { "call": "Add(1, 2)", "expected": "3" },
        { "call": "Add(-2, 3)", "expected": "1" },
        { "call": "Add(0, 0)", "expected": "0" },
        { "call": "Add(100, 200)", "expected": "300" },
        { "call": "Add(-100, -100)", "expected": "-200" },
        { "call": "Add(2147483647, 1)", "expected": "2147483648" },
        { "call": "Add(-2147483648, 1)", "expected": "-2147483647" },
        { "call": "Add(999, -999)", "expected": "0" },
        { "call": "Add(5000, 0)", "expected": "5000" },
        { "call": "Add(0, 5000)", "expected": "5000" }
      ]
    },
    {
      "title": "Reverse String",
      "slug": "reverse-string",
      "description": "Given a string, return a new string with the characters in reverse order.",
      "visible_skeleton": "func Reverse(s string) string {\n    return \"\"\n}\n",
      "test_cases": [
        { "call": "Reverse(\"hello\")", "expected": "\"olleh\"" },
        { "call": "Reverse(\"abc\")", "expected": "\"cba\"" },
        { "call": "Reverse(\"\")", "expected": "\"\"" },
        { "call": "Reverse(\"a\")", "expected": "\"a\"" },
        { "call": "Reverse(\"racecar\")", "expected": "\"racecar\"" }
      ]
    },
    {
      "title": "Fibonacci Number",
      "slug": "fibonacci-number",
      "description": "Return the n-th Fibonacci number (0-indexed). F(0)=0, F(1)=1.",
      "visible_skeleton": "func Fib(n int) int {\n    return 0\n}\n",
      "test_cases": [
        { "call": "Fib(0)", "expected": "0" },
        { "call": "Fib(1)", "expected": "1" },
        { "call": "Fib(2)", "expected": "1" },
        { "call": "Fib(5)", "expected": "5" },
        { "call": "Fib(10)", "expected": "55" }
      ]
    },
    {
      "title": "Is Palindrome",
      "slug": "is-palindrome",
      "description": "Check if a given string is a palindrome (reads the same forwards and backwards).",
      "visible_skeleton": "func IsPalindrome(s string) bool {\n    return false\n}\n",
      "test_cases": [
        { "call": "IsPalindrome(\"racecar\")", "expected": "true" },
        { "call": "IsPalindrome(\"hello\")", "expected": "false" },
        { "call": "IsPalindrome(\"\")", "expected": "true" },
        { "call": "IsPalindrome(\"a\")", "expected": "true" },
        { "call": "IsPalindrome(\"abba\")", "expected": "true" }
      ]
    },
    {
      "title": "Two Sum",
      "slug": "two-sum",
      "description": "Given an array of integers and a target, return true if any two numbers sum to the target.",
      "visible_skeleton": "func TwoSum(nums []int, target int) bool {\n    return false\n}\n",
      "test_cases": [
        { "call": "TwoSum([]int{2,7,11,15}, 9)", "expected": "true" },
        { "call": "TwoSum([]int{1,2,3}, 7)", "expected": "false" },
        { "call": "TwoSum([]int{3,3}, 6)", "expected": "true" },
        { "call": "TwoSum([]int{}, 0)", "expected": "false" },
        { "call": "TwoSum([]int{5}, 5)", "expected": "false" }
      ]
    },
    {
      "title": "Factorial",
      "slug": "factorial",
      "description": "Return the factorial of n (n!).",
      "visible_skeleton": "func Factorial(n int) int {\n    return 0\n}\n",
      "test_cases": [
        { "call": "Factorial(0)", "expected": "1" },
        { "call": "Factorial(1)", "expected": "1" },
        { "call": "Factorial(5)", "expected": "120" },
        { "call": "Factorial(10)", "expected": "3628800" },
        { "call": "Factorial(3)", "expected": "6" }
      ]
    },
    {
      "title": "Find Max",
      "slug": "find-max",
      "description": "Return the maximum number in a slice of integers.",
      "visible_skeleton": "func FindMax(nums []int) int {\n    return 0\n}\n",
      "test_cases": [
        { "call": "FindMax([]int{1,2,3})", "expected": "3" },
        { "call": "FindMax([]int{-1,-5,-3})", "expected": "-1" },
        { "call": "FindMax([]int{7})", "expected": "7" },
        { "call": "FindMax([]int{100,200,50})", "expected": "200" },
        { "call": "FindMax([]int{-10,0,10})", "expected": "10" }
      ]
    }
  ]
}

