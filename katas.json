{"katas":[{"title":"Add Two Numbers","slug":"add-two-numbers","description":"Return the sum of two integers.","visible_skeleton":"func Add(a int, b int) int {\n\treturn 0\n}\n","test_cases":[{"call":"Add(1, 2)","expected":"3"},{"call":"Add(-2, 3)","expected":"1"},{"call":"Add(0, 0)","expected":"0"},{"call":"Add(100, 200)","expected":"300"},{"call":"Add(-100, -100)","expected":"-200"},{"call":"Add(2147483647, 1)","expected":"2147483648"},{"call":"Add(-2147483648, 1)","expected":"-2147483647"},{"call":"Add(999, -999)","expected":"0"},{"call":"Add(5000, 0)","expected":"5000"},{"call":"Add(0, 5000)","expected":"5000"}]},{"title":"Two Sum II (Sorted, Two Pointers)","slug":"two-sum-ii-sorted","description":"Given a sorted slice of integers and a target, return true if any two numbers sum to the target.","visible_skeleton":"func TwoSumSorted(nums []int, target int) bool {\n\t// nums is sorted non-decreasing\n\treturn false\n}\n","test_cases":[{"call":"TwoSumSorted([1,2,3,4], 5)","expected":"true"},{"call":"TwoSumSorted([1,2,3,4], 7)","expected":"true"},{"call":"TwoSumSorted([1,2,3,4], 8)","expected":"false"},{"call":"TwoSumSorted([], 0)","expected":"false"},{"call":"TwoSumSorted([5], 5)","expected":"false"},{"call":"TwoSumSorted([-3,-1,2,4], 1)","expected":"true"},{"call":"TwoSumSorted([-3,-1,2,4], 10)","expected":"false"},{"call":"TwoSumSorted([2,2], 4)","expected":"true"},{"call":"TwoSumSorted([2,3,5,9], 7)","expected":"true"},{"call":"TwoSumSorted([2,3,5,9], 10)","expected":"false"}]},{"title":"Container With Most Water","slug":"container-most-water","description":"Given heights of vertical lines, return the maximum area of water a container can store.","visible_skeleton":"func MaxArea(height []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MaxArea([1,8,6,2,5,4,8,3,7])","expected":"49"},{"call":"MaxArea([1,1])","expected":"1"},{"call":"MaxArea([4,3,2,1,4])","expected":"16"},{"call":"MaxArea([1,2,1])","expected":"2"},{"call":"MaxArea([2,3,10,5,7,8,9])","expected":"36"},{"call":"MaxArea([1,2,3,4,5,25,24,3,4])","expected":"24"},{"call":"MaxArea([2,2,2,2,2])","expected":"8"},{"call":"MaxArea([5,4,3,2,1])","expected":"6"},{"call":"MaxArea([10,9,8,7,6,5,4,3,2,1])","expected":"25"},{"call":"MaxArea([1,3,2,5,25,24,5])","expected":"24"}]},{"title":"3Sum","slug":"three-sum","description":"Return all unique triplets [a,b,c] such that a+b+c=0 (triplets in non-decreasing order, list sorted lexicographically).","visible_skeleton":"func ThreeSum(nums []int) [][]int {\n\treturn nil\n}\n","test_cases":[{"call":"ThreeSum([-1,0,1,2,-1,-4])","expected":"[[-1, -1, 2], [-1, 0, 1]]"},{"call":"ThreeSum([])","expected":"[]"},{"call":"ThreeSum([0,0,0])","expected":"[[0, 0, 0]]"},{"call":"ThreeSum([3,-2,1,0])","expected":"[]"},{"call":"ThreeSum([1,2,-2,-1])","expected":"[]"},{"call":"ThreeSum([0,0,0,0])","expected":"[[0, 0, 0]]"},{"call":"ThreeSum([-2,0,1,1,2])","expected":"[[-2, 0, 2], [-2, 1, 1]]"},{"call":"ThreeSum([-1,0,1])","expected":"[[-1, 0, 1]]"},{"call":"ThreeSum([1,1,-2])","expected":"[[-2, 1, 1]]"},{"call":"ThreeSum([-4,-2,-2,0,1,2,3,4])","expected":"[[-4, 0, 4], [-4, 1, 3], [-2, -2, 4], [-2, 0, 2]]"}]},{"title":"Sort Colors (Dutch National Flag)","slug":"sort-colors","description":"Sort an array of 0s, 1s and 2s in-place.","visible_skeleton":"func SortColors(nums []int) []int {\n\treturn nums\n}\n","test_cases":[{"call":"SortColors([2,0,2,1,1,0])","expected":"[0, 0, 1, 1, 2, 2]"},{"call":"SortColors([2,0,1])","expected":"[0, 1, 2]"},{"call":"SortColors([0])","expected":"[0]"},{"call":"SortColors([1])","expected":"[1]"},{"call":"SortColors([2])","expected":"[2]"},{"call":"SortColors([1,2,0])","expected":"[0, 1, 2]"},{"call":"SortColors([0,1,2,0,1,2])","expected":"[0, 0, 1, 1, 2, 2]"},{"call":"SortColors([2,2,2])","expected":"[2, 2, 2]"},{"call":"SortColors([0,0,1,1,2,2])","expected":"[0, 0, 1, 1, 2, 2]"},{"call":"SortColors([1,0,1,2,0,2,1])","expected":"[0, 0, 1, 1, 1, 2, 2]"}]},{"title":"Linked List Cycle Detection (Floyd's Tortoise & Hare)","slug":"linked-list-cycle","description":"Given values and a pos index where the tail connects to form a cycle (-1 for no cycle), return true if the list has a cycle.","visible_skeleton":"func HasCycle(vals []int, pos int) bool {\n\treturn false\n}\n","test_cases":[{"call":"HasCycle([3,2,0,-4], 1)","expected":"true"},{"call":"HasCycle([1,2], 0)","expected":"true"},{"call":"HasCycle([1], -1)","expected":"false"},{"call":"HasCycle([], -1)","expected":"false"},{"call":"HasCycle([1,2,3,4,5], 2)","expected":"true"},{"call":"HasCycle([1,2,3,4,5], -1)","expected":"false"},{"call":"HasCycle([1,1,1,1], 0)","expected":"true"},{"call":"HasCycle([1,2], -1)","expected":"false"},{"call":"HasCycle([0,1,2,3,4,5,6,7], 3)","expected":"true"},{"call":"HasCycle([10,20,30], -1)","expected":"false"}]},{"title":"Find the Duplicate Number (Floyd's Cycle Method)","slug":"find-duplicate-number","description":"Array nums contains n+1 integers where each integer is between 1 and n (inclusive). There is exactly one duplicate. Return it without modifying the array.","visible_skeleton":"func FindDuplicate(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"FindDuplicate([1,3,4,2,2])","expected":"2"},{"call":"FindDuplicate([3,1,3,4,2])","expected":"3"},{"call":"FindDuplicate([1,1])","expected":"1"},{"call":"FindDuplicate([1,1,2])","expected":"1"},{"call":"FindDuplicate([2,2,2,2,2])","expected":"2"},{"call":"FindDuplicate([2,5,9,6,9,3,8,9,7,1])","expected":"9"},{"call":"FindDuplicate([1,4,6,3,2,5,5])","expected":"5"},{"call":"FindDuplicate([1,2,3,4,5,6,7,7])","expected":"7"},{"call":"FindDuplicate([5,1,4,2,3,5])","expected":"5"},{"call":"FindDuplicate([9,1,2,3,4,5,6,7,8,9])","expected":"9"}]},{"title":"Longest Substring Without Repeating Characters","slug":"longest-substring-unique","description":"Return the length of the longest substring without repeating characters.","visible_skeleton":"func LengthOfLongestSubstring(s string) int {\n\treturn 0\n}\n","test_cases":[{"call":"LengthOfLongestSubstring(\"abcabcbb\")","expected":"3"},{"call":"LengthOfLongestSubstring(\"bbbbb\")","expected":"1"},{"call":"LengthOfLongestSubstring(\"pwwkew\")","expected":"3"},{"call":"LengthOfLongestSubstring(\"\")","expected":"0"},{"call":"LengthOfLongestSubstring(\"a\")","expected":"1"},{"call":"LengthOfLongestSubstring(\"au\")","expected":"2"},{"call":"LengthOfLongestSubstring(\"dvdf\")","expected":"3"},{"call":"LengthOfLongestSubstring(\"abba\")","expected":"2"},{"call":"LengthOfLongestSubstring(\"tmmzuxt\")","expected":"5"},{"call":"LengthOfLongestSubstring(\"anviaj\")","expected":"5"}]},{"title":"Minimum Window Substring","slug":"minimum-window-substring","description":"Given strings s and t, return the minimum window in s which will contain all the characters in t. If no such window exists, return empty string.","visible_skeleton":"func MinWindow(s string, t string) string {\n\treturn \"\"\n}\n","test_cases":[{"call":"MinWindow(\"ADOBECODEBANC\", \"ABC\")","expected":"\"BANC\""},{"call":"MinWindow(\"a\", \"a\")","expected":"\"a\""},{"call":"MinWindow(\"a\", \"aa\")","expected":"\"\""},{"call":"MinWindow(\"ab\", \"b\")","expected":"\"b\""},{"call":"MinWindow(\"ab\", \"a\")","expected":"\"a\""},{"call":"MinWindow(\"ab\", \"ab\")","expected":"\"ab\""},{"call":"MinWindow(\"bbaa\", \"aba\")","expected":"\"baa\""},{"call":"MinWindow(\"aa\", \"aa\")","expected":"\"aa\""},{"call":"MinWindow(\"aa\", \"aaa\")","expected":"\"\""},{"call":"MinWindow(\"cabwefgewcwaefgcf\", \"cae\")","expected":"\"cwae\""}]},{"title":"Merge Intervals","slug":"merge-intervals","description":"Given a list of intervals, merge all overlapping intervals.","visible_skeleton":"func MergeIntervals(intervals [][]int) [][]int {\n\treturn nil\n}\n","test_cases":[{"call":"MergeIntervals([[1, 3], [2, 6], [8, 10], [15, 18]])","expected":"[[1, 6], [8, 10], [15, 18]]"},{"call":"MergeIntervals([[1, 4], [4, 5]])","expected":"[[1, 5]]"},{"call":"MergeIntervals([[1, 4], [2, 3]])","expected":"[[1, 4]]"},{"call":"MergeIntervals([[1, 4], [0, 4]])","expected":"[[0, 4]]"},{"call":"MergeIntervals([[1, 4], [0, 2], [3, 5]])","expected":"[[0, 5]]"},{"call":"MergeIntervals([[1, 5]])","expected":"[[1, 5]]"},{"call":"MergeIntervals([[1, 4], [2, 6], [6, 8]])","expected":"[[1, 8]]"},{"call":"MergeIntervals([[1, 4], [0, 2], [3, 4]])","expected":"[[0, 4]]"},{"call":"MergeIntervals([[1, 3], [2, 4], [5, 7], [6, 8]])","expected":"[[1, 4], [5, 8]]"},{"call":"MergeIntervals([[1, 10], [2, 3], [4, 5], [6, 7], [8, 9]])","expected":"[[1, 10]]"}]},{"title":"Insert Interval","slug":"insert-interval","description":"Insert a new interval into a list of non-overlapping intervals and merge if necessary.","visible_skeleton":"func InsertInterval(intervals [][]int, newInterval []int) [][]int {\n\treturn nil\n}\n","test_cases":[{"call":"InsertInterval([[1, 3], [6, 9]], [2, 5])","expected":"[[1, 5], [6, 9]]"},{"call":"InsertInterval([[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]], [4, 8])","expected":"[[1, 2], [3, 10], [12, 16]]"},{"call":"InsertInterval([], [5, 7])","expected":"[[5, 7]]"},{"call":"InsertInterval([[1, 5]], [2, 3])","expected":"[[1, 5]]"},{"call":"InsertInterval([[1, 5]], [2, 7])","expected":"[[1, 7]]"},{"call":"InsertInterval([[1, 5]], [6, 8])","expected":"[[1, 5], [6, 8]]"},{"call":"InsertInterval([[1, 3], [4, 6]], [2, 5])","expected":"[[1, 6]]"},{"call":"InsertInterval([[1, 3], [5, 7]], [8, 10])","expected":"[[1, 3], [5, 7], [8, 10]]"},{"call":"InsertInterval([[3, 5], [12, 15]], [6, 6])","expected":"[[3, 5], [6, 6], [12, 15]]"},{"call":"InsertInterval([[1, 4], [5, 6]], [2, 3])","expected":"[[1, 4], [5, 6]]"}]},{"title":"Missing Number (0..n)","slug":"missing-number","description":"Given an array containing n distinct numbers taken from 0..n, find the one that is missing.","visible_skeleton":"func MissingNumber(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MissingNumber([3,0,1])","expected":"2"},{"call":"MissingNumber([0,1])","expected":"2"},{"call":"MissingNumber([9,6,4,2,3,5,7,0,1])","expected":"8"},{"call":"MissingNumber([0])","expected":"1"},{"call":"MissingNumber([1])","expected":"0"},{"call":"MissingNumber([2,0])","expected":"1"},{"call":"MissingNumber([4,2,1,0])","expected":"3"},{"call":"MissingNumber([2,3,4,5,6,7,8,9,10,0])","expected":"1"},{"call":"MissingNumber([1,2,3,4,5,6,7,8,9,10])","expected":"0"},{"call":"MissingNumber([0,2,3])","expected":"1"}]},{"title":"Find All Duplicates in an Array","slug":"find-all-duplicates","description":"Return all elements that appear twice in an array of integers (1..n). Any order.","visible_skeleton":"func FindDuplicates(nums []int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"FindDuplicates([4,3,2,7,8,2,3,1])","expected":"[2, 3]"},{"call":"FindDuplicates([1,1,2])","expected":"[1]"},{"call":"FindDuplicates([1])","expected":"[]"},{"call":"FindDuplicates([2,2])","expected":"[2]"},{"call":"FindDuplicates([1,2,3,4,5,6,7,7])","expected":"[7]"},{"call":"FindDuplicates([5,4,6,7,9,3,10,9,5,6])","expected":"[5, 6, 9]"},{"call":"FindDuplicates([10,2,5,10,9,1,1,4,3,7])","expected":"[1, 10]"},{"call":"FindDuplicates([1,1,1,2,2,3])","expected":"[1, 2]"},{"call":"FindDuplicates([2,3,2,1,5,1])","expected":"[1, 2]"},{"call":"FindDuplicates([8,7,6,5,4,3,2,1])","expected":"[]"}]},{"title":"Reverse Linked List (slice representation)","slug":"reverse-linked-list-slice","description":"Given a slice representing the values of a linked list, return the values reversed.","visible_skeleton":"func ReverseListVals(vals []int) []int {\n\treturn vals\n}\n","test_cases":[{"call":"ReverseListVals([1,2,3,4,5])","expected":"[5, 4, 3, 2, 1]"},{"call":"ReverseListVals([1])","expected":"[1]"},{"call":"ReverseListVals([])","expected":"[]"},{"call":"ReverseListVals([2,1])","expected":"[1, 2]"},{"call":"ReverseListVals([5,4,3,2,1])","expected":"[1, 2, 3, 4, 5]"},{"call":"ReverseListVals([1,1,1])","expected":"[1, 1, 1]"},{"call":"ReverseListVals([1,2,1])","expected":"[1, 2, 1]"},{"call":"ReverseListVals([0,1,2,3])","expected":"[3, 2, 1, 0]"},{"call":"ReverseListVals([9,8,7])","expected":"[7, 8, 9]"},{"call":"ReverseListVals([42])","expected":"[42]"}]},{"title":"Reverse Nodes in k-Group (slice representation)","slug":"reverse-nodes-k-group-slice","description":"Given a slice of list values and k, reverse the nodes of the list k at a time (leave remainder as-is). Return the slice of values.","visible_skeleton":"func ReverseKGroupVals(vals []int, k int) []int {\n\treturn vals\n}\n","test_cases":[{"call":"ReverseKGroupVals([1,2,3,4,5], 2)","expected":"[2, 1, 4, 3, 5]"},{"call":"ReverseKGroupVals([1,2,3,4,5], 3)","expected":"[3, 2, 1, 4, 5]"},{"call":"ReverseKGroupVals([1,2,3,4,5], 1)","expected":"[1, 2, 3, 4, 5]"},{"call":"ReverseKGroupVals([1,2,3,4,5], 4)","expected":"[4, 3, 2, 1, 5]"},{"call":"ReverseKGroupVals([1,2,3,4,5], 5)","expected":"[5, 4, 3, 2, 1]"},{"call":"ReverseKGroupVals([1,2], 2)","expected":"[2, 1]"},{"call":"ReverseKGroupVals([1,2], 3)","expected":"[1, 2]"},{"call":"ReverseKGroupVals([], 2)","expected":"[]"},{"call":"ReverseKGroupVals([1], 2)","expected":"[1]"},{"call":"ReverseKGroupVals([1,2,3], 2)","expected":"[2, 1, 3]"}]},{"title":"Valid Parentheses","slug":"valid-parentheses","description":"Given a string of parentheses, return true if it is valid.","visible_skeleton":"func IsValidParentheses(s string) bool {\n\treturn false\n}\n","test_cases":[{"call":"IsValidParentheses(\"()\")","expected":"true"},{"call":"IsValidParentheses(\"()[]{}\")","expected":"true"},{"call":"IsValidParentheses(\"(]\")","expected":"false"},{"call":"IsValidParentheses(\"([)]\")","expected":"false"},{"call":"IsValidParentheses(\"{[]}\")","expected":"true"},{"call":"IsValidParentheses(\"\")","expected":"true"},{"call":"IsValidParentheses(\"(((((\")","expected":"false"},{"call":"IsValidParentheses(\"}}}}\")","expected":"false"},{"call":"IsValidParentheses(\"([])\")","expected":"true"},{"call":"IsValidParentheses(\"(([]){})\")","expected":"true"}]},{"title":"Min Stack (operation simulation)","slug":"min-stack-sim","description":"Simulate a MinStack. Given ops (push/pop/top/getMin) and values for pushes, return outputs as strings for each op (use \"null\" for non-returning ops).","visible_skeleton":"func MinStackSim(ops []string, vals []int) []string {\n\t// ops contains push/pop/top/getMin; vals provides values for push operations in order\n\treturn nil\n}\n","test_cases":[{"call":"MinStackSim([\"push\", \"push\", \"push\", \"getMin\", \"pop\", \"top\", \"getMin\"], [2,0,3])","expected":"[\"null\", \"null\", \"null\", \"0\", \"null\", \"0\", \"0\"]"},{"call":"MinStackSim([\"push\", \"push\", \"getMin\", \"push\", \"getMin\", \"pop\", \"getMin\"], [5,3,1])","expected":"[\"null\", \"null\", \"3\", \"null\", \"1\", \"null\", \"3\"]"},{"call":"MinStackSim([\"push\", \"top\", \"pop\", \"getMin\"], [7])","expected":"[\"null\", \"7\", \"null\", \"null\"]"},{"call":"MinStackSim([\"push\", \"push\", \"pop\", \"getMin\"], [10,-1])","expected":"[\"null\", \"null\", \"null\", \"10\"]"},{"call":"MinStackSim([\"getMin\"], [])","expected":"[\"null\"]"},{"call":"MinStackSim([\"push\", \"push\", \"push\", \"pop\", \"pop\", \"getMin\"], [3,4,5])","expected":"[\"null\", \"null\", \"null\", \"null\", \"null\", \"3\"]"},{"call":"MinStackSim([\"push\", \"getMin\", \"push\", \"getMin\", \"push\", \"getMin\"], [2,1,3])","expected":"[\"null\", \"2\", \"null\", \"1\", \"null\", \"1\"]"},{"call":"MinStackSim([\"push\", \"push\", \"top\", \"getMin\", \"pop\", \"top\", \"getMin\"], [0,0])","expected":"[\"null\", \"null\", \"0\", \"0\", \"null\", \"0\", \"0\"]"},{"call":"MinStackSim([\"push\", \"push\", \"push\", \"push\", \"getMin\", \"pop\", \"getMin\"], [9,8,7,6])","expected":"[\"null\", \"null\", \"null\", \"null\", \"6\", \"null\", \"7\"]"},{"call":"MinStackSim([\"push\", \"pop\", \"pop\", \"getMin\"], [1])","expected":"[\"null\", \"null\", \"null\", \"null\"]"}]},{"title":"Next Greater Element I","slug":"next-greater-element-i","description":"For each element in nums1, find the next greater element in nums2; return -1 if none.","visible_skeleton":"func NextGreaterElement(nums1 []int, nums2 []int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"NextGreaterElement([4,1,2], [1,3,4,2])","expected":"[-1, 3, -1]"},{"call":"NextGreaterElement([2,4], [1,2,3,4])","expected":"[3, -1]"},{"call":"NextGreaterElement([1,3,5,2,4], [6,5,4,3,2,1,7])","expected":"[7, 7, 7, 7, 7]"},{"call":"NextGreaterElement([2,1,3], [2,3,1])","expected":"[3, -1, -1]"},{"call":"NextGreaterElement([1], [1])","expected":"[-1]"},{"call":"NextGreaterElement([1,2], [2,1])","expected":"[-1, -1]"},{"call":"NextGreaterElement([1,2,3], [3,2,1])","expected":"[-1, -1, -1]"},{"call":"NextGreaterElement([4,2], [1,2,3,4,5])","expected":"[5, 3]"},{"call":"NextGreaterElement([2,3], [2,3,1])","expected":"[3, -1]"},{"call":"NextGreaterElement([1,5,3], [6,5,4,3,2,1])","expected":"[-1, -1, -1]"}]},{"title":"Largest Rectangle in Histogram","slug":"largest-rectangle-histogram","description":"Given heights of histogram bars, return the area of the largest rectangle in the histogram.","visible_skeleton":"func LargestRectangleArea(heights []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"LargestRectangleArea([2,1,5,6,2,3])","expected":"10"},{"call":"LargestRectangleArea([2,4])","expected":"4"},{"call":"LargestRectangleArea([1,1])","expected":"2"},{"call":"LargestRectangleArea([1])","expected":"1"},{"call":"LargestRectangleArea([6,2,5,4,5,1,6])","expected":"12"},{"call":"LargestRectangleArea([0])","expected":"0"},{"call":"LargestRectangleArea([4,2,0,3,2,5])","expected":"6"},{"call":"LargestRectangleArea([2,1,2])","expected":"3"},{"call":"LargestRectangleArea([3,6,5,7,4,8,1,0])","expected":"20"},{"call":"LargestRectangleArea([1,2,3,4,5])","expected":"9"}]},{"title":"Two Sum (Return Indices)","slug":"two-sum-indices","description":"Return indices [i,j] (ascending) of two numbers such that they add up to target, or [-1,-1] if none.","visible_skeleton":"func TwoSumIndices(nums []int, target int) []int {\n\treturn []int{-1, -1}\n}\n","test_cases":[{"call":"TwoSumIndices([2,7,11,15], 9)","expected":"[0, 1]"},{"call":"TwoSumIndices([3,2,4], 6)","expected":"[1, 2]"},{"call":"TwoSumIndices([3,3], 6)","expected":"[0, 1]"},{"call":"TwoSumIndices([1,2,3,4,5], 10)","expected":"[-1, -1]"},{"call":"TwoSumIndices([1,2,3,4,5], 100)","expected":"[-1, -1]"},{"call":"TwoSumIndices([0,4,3,0], 0)","expected":"[0, 3]"},{"call":"TwoSumIndices([-3,4,3,90], 0)","expected":"[0, 2]"},{"call":"TwoSumIndices([1,1,1,2,3], 4)","expected":"[2, 4]"},{"call":"TwoSumIndices([2,5,5,11], 10)","expected":"[1, 2]"},{"call":"TwoSumIndices([1,2], 3)","expected":"[0, 1]"}]},{"title":"Group Anagrams","slug":"group-anagrams","description":"Group words that are anagrams; within each group and across groups, order does not matter.","visible_skeleton":"func GroupAnagrams(words []string) [][]string {\n\treturn nil\n}\n","test_cases":[{"call":"GroupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"])","expected":"[[\"ate\", \"eat\", \"tea\"], [\"bat\"], [\"nat\", \"tan\"]]"},{"call":"GroupAnagrams([\"\"])","expected":"[[\"\"]]"},{"call":"GroupAnagrams([\"a\"])","expected":"[[\"a\"]]"},{"call":"GroupAnagrams([\"ab\", \"ba\", \"abc\", \"cba\", \"bca\", \"cab\"])","expected":"[[\"ab\", \"ba\"], [\"abc\", \"bca\", \"cab\", \"cba\"]]"},{"call":"GroupAnagrams([\"listen\", \"silent\", \"enlist\", \"google\", \"gooegl\"])","expected":"[[\"enlist\", \"listen\", \"silent\"], [\"gooegl\", \"google\"]]"},{"call":"GroupAnagrams([\"zzz\", \"zzz\", \"zz\"])","expected":"[[\"zz\"], [\"zzz\", \"zzz\"]]"},{"call":"GroupAnagrams([\"bob\", \"obb\", \"bbo\", \"obo\"])","expected":"[[\"bbo\", \"bob\", \"obb\"], [\"obo\"]]"},{"call":"GroupAnagrams([\"x\", \"y\", \"z\"])","expected":"[[\"x\"], [\"y\"], [\"z\"]]"},{"call":"GroupAnagrams([\"\", \"\"])","expected":"[[\"\", \"\"]]"},{"call":"GroupAnagrams([\"rat\", \"tar\", \"art\", \"car\"])","expected":"[[\"art\", \"rat\", \"tar\"], [\"car\"]]"}]},{"title":"Binary Tree Level Order Traversal (array input)","slug":"bt-level-order-levels","description":"Input is level-order array with -1 as null. Return levels as [][]int (omit nulls).","visible_skeleton":"func LevelOrderLevels(arr []int) [][]int {\n\t// -1 denotes null\n\treturn nil\n}\n","test_cases":[{"call":"LevelOrderLevels([3,9,20,-1,-1,15,7])","expected":"[[3], [9, 20], [15, 7]]"},{"call":"LevelOrderLevels([])","expected":"[]"},{"call":"LevelOrderLevels([1])","expected":"[[1]]"},{"call":"LevelOrderLevels([1,2,3,4,5,-1,6])","expected":"[[1], [2, 3], [4, 5, 6]]"},{"call":"LevelOrderLevels([5,4,8,11,-1,13,4,7,2,-1,-1,-1,1])","expected":"[[5], [4, 8], [11, 13, 4], [7, 2, 1]]"},{"call":"LevelOrderLevels([1,-1,2,-1,3])","expected":"[[1], [2]]"},{"call":"LevelOrderLevels([1,2])","expected":"[[1], [2]]"},{"call":"LevelOrderLevels([1,-1,2,3])","expected":"[[1], [2]]"},{"call":"LevelOrderLevels([0,-1,-1])","expected":"[[0]]"},{"call":"LevelOrderLevels([2,1,3])","expected":"[[2], [1, 3]]"}]},{"title":"Minimum Depth of Binary Tree (array input)","slug":"bt-min-depth","description":"Input is level-order array with -1 as null. Return the minimum depth.","visible_skeleton":"func MinDepthArrayTree(arr []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MinDepthArrayTree([3,9,20,-1,-1,15,7])","expected":"2"},{"call":"MinDepthArrayTree([])","expected":"0"},{"call":"MinDepthArrayTree([1])","expected":"1"},{"call":"MinDepthArrayTree([1,2,3,4,5,-1,6])","expected":"3"},{"call":"MinDepthArrayTree([5,4,8,11,-1,13,4,7,2,-1,-1,-1,1])","expected":"3"},{"call":"MinDepthArrayTree([1,-1,2,-1,3])","expected":"2"},{"call":"MinDepthArrayTree([1,2])","expected":"2"},{"call":"MinDepthArrayTree([1,-1,2,3])","expected":"2"},{"call":"MinDepthArrayTree([0,-1,-1])","expected":"1"},{"call":"MinDepthArrayTree([2,1,3])","expected":"2"}]},{"title":"Path Sum (root-to-leaf equals target)","slug":"bt-path-sum-exists","description":"Return true if there exists a root-to-leaf path with sum == target. Tree given as level-order array with -1 as null.","visible_skeleton":"func HasPathSumArray(arr []int, target int) bool {\n\treturn false\n}\n","test_cases":[{"call":"HasPathSumArray([5,4,8,11,-1,13,4,7,2,-1,-1,-1,1], 22)","expected":"true"},{"call":"HasPathSumArray([1,2,3], 5)","expected":"false"},{"call":"HasPathSumArray([1,2], 1)","expected":"false"},{"call":"HasPathSumArray([1,2], 3)","expected":"true"},{"call":"HasPathSumArray([], 0)","expected":"false"},{"call":"HasPathSumArray([1,-1,2,-1,3], 6)","expected":"false"},{"call":"HasPathSumArray([1,-1,2,-1,3], 3)","expected":"true"},{"call":"HasPathSumArray([0], 0)","expected":"true"},{"call":"HasPathSumArray([2,1,3], 4)","expected":"false"},{"call":"HasPathSumArray([2,1,3], 5)","expected":"true"}]},{"title":"Connected Components in an Undirected Graph","slug":"graph-connected-components","description":"Given n nodes labeled 0..n-1 and edges, return the number of connected components.","visible_skeleton":"func CountComponents(n int, edges [][]int) int {\n\treturn 0\n}\n","test_cases":[{"call":"CountComponents(5, [[0, 1], [1, 2], [3, 4]])","expected":"2"},{"call":"CountComponents(5, [[0, 1], [1, 2], [2, 3], [3, 4]])","expected":"1"},{"call":"CountComponents(4, [])","expected":"4"},{"call":"CountComponents(1, [])","expected":"1"},{"call":"CountComponents(4, [[0, 1], [2, 3]])","expected":"2"},{"call":"CountComponents(6, [[0, 1], [1, 2], [3, 4]])","expected":"3"},{"call":"CountComponents(3, [[0, 1], [1, 2], [2, 0]])","expected":"1"},{"call":"CountComponents(7, [[0, 1], [2, 3], [4, 5]])","expected":"4"},{"call":"CountComponents(2, [[0, 1]])","expected":"1"},{"call":"CountComponents(10, [[0, 1], [2, 3], [3, 4], [5, 6], [7, 8], [8, 9]])","expected":"4"}]},{"title":"Number of Islands","slug":"number-of-islands","description":"Grid given as []string of '0' and '1'. Return number of islands (4-directional).","visible_skeleton":"func NumIslands(grid []string) int {\n\treturn 0\n}\n","test_cases":[{"call":"NumIslands([\"11110\", \"11010\", \"11000\", \"00000\"])","expected":"1"},{"call":"NumIslands([\"11000\", \"11000\", \"00100\", \"00011\"])","expected":"3"},{"call":"NumIslands([\"0\"])","expected":"0"},{"call":"NumIslands([\"1\"])","expected":"1"},{"call":"NumIslands([\"10\", \"01\"])","expected":"2"},{"call":"NumIslands([\"101\", \"010\", \"101\"])","expected":"5"},{"call":"NumIslands([\"111\", \"010\", \"111\"])","expected":"1"},{"call":"NumIslands([\"000\", \"000\", \"000\"])","expected":"0"},{"call":"NumIslands([\"100\", \"000\", \"001\"])","expected":"2"},{"call":"NumIslands([\"11011\", \"10001\", \"00100\", \"10001\", \"11011\"])","expected":"5"}]},{"title":"Max Area of Island","slug":"max-area-island","description":"Grid given as [][]int of 0/1. Return largest area of a 4-connected island.","visible_skeleton":"func MaxAreaOfIsland(grid [][]int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MaxAreaOfIsland([[0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1]])","expected":"5"},{"call":"MaxAreaOfIsland([[1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1]])","expected":"4"},{"call":"MaxAreaOfIsland([[0]])","expected":"0"},{"call":"MaxAreaOfIsland([[1]])","expected":"1"},{"call":"MaxAreaOfIsland([[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]])","expected":"1"},{"call":"MaxAreaOfIsland([[1, 1, 1], [1, 1, 0], [1, 0, 1]])","expected":"6"},{"call":"MaxAreaOfIsland([[0, 0, 0], [0, 0, 0]])","expected":"0"},{"call":"MaxAreaOfIsland([[1, 0, 0], [0, 0, 0], [0, 0, 1]])","expected":"1"},{"call":"MaxAreaOfIsland([[1, 1, 1, 1], [1, 1, 1, 1]])","expected":"8"},{"call":"MaxAreaOfIsland([[1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1]])","expected":"6"}]},{"title":"Online Medians (Two Heaps)","slug":"online-medians","description":"Return median after each insertion; output []float64 matching stream positions.","visible_skeleton":"func OnlineMedians(nums []int) []float64 {\n\treturn nil\n}\n","test_cases":[{"call":"OnlineMedians([1,2,3,4,5])","expected":"[1.0, 1.5, 2.0, 2.5, 3.0]"},{"call":"OnlineMedians([5,4,3,2,1])","expected":"[5.0, 4.5, 4.0, 3.5, 3.0]"},{"call":"OnlineMedians([2,1,5,7,2,0,5])","expected":"[2.0, 1.5, 2.0, 3.5, 2.0, 2.0, 2.0]"},{"call":"OnlineMedians([1])","expected":"[1.0]"},{"call":"OnlineMedians([1,1,1,1])","expected":"[1.0, 1.0, 1.0, 1.0]"},{"call":"OnlineMedians([10,20,30])","expected":"[10.0, 15.0, 20.0]"},{"call":"OnlineMedians([3,8,9,2])","expected":"[3.0, 5.5, 8.0, 5.5]"},{"call":"OnlineMedians([100,-1,50,-2,0])","expected":"[100.0, 49.5, 50.0, 24.5, 0.0]"},{"call":"OnlineMedians([1,2])","expected":"[1.0, 1.5]"},{"call":"OnlineMedians([0,0,0,1])","expected":"[0.0, 0.0, 0.0, 0.0]"}]},{"title":"Sliding Window Median (Two Heaps)","slug":"sliding-window-median","description":"Given nums and k, return median for each window as []float64.","visible_skeleton":"func SlidingWindowMedian(nums []int, k int) []float64 {\n\treturn nil\n}\n","test_cases":[{"call":"SlidingWindowMedian([1,3,-1,-3,5,3,6,7], 3)","expected":"[1.0, -1.0, -1.0, 3.0, 3.0, 3.0]"},{"call":"SlidingWindowMedian([1,2], 1)","expected":"[1.0, 2.0]"},{"call":"SlidingWindowMedian([1,4,2,3], 4)","expected":"[2.5]"},{"call":"SlidingWindowMedian([0,0,0,0], 2)","expected":"[0.0, 0.0, 0.0]"},{"call":"SlidingWindowMedian([5,2,2,7,3,7,9,0,2,3], 9)","expected":"[3.0, 3.0]"},{"call":"SlidingWindowMedian([1], 1)","expected":"[1.0]"},{"call":"SlidingWindowMedian([2,2,2,2], 2)","expected":"[2.0, 2.0, 2.0]"},{"call":"SlidingWindowMedian([1,2,3,4,2,3,1], 3)","expected":"[2.0, 2.0, 3.0, 3.0, 2.0]"},{"call":"SlidingWindowMedian([7,0,3,9,9,9,1,7,2,3], 6)","expected":"[8.0, 6.0, 8.0, 4.5, 5.0]"},{"call":"SlidingWindowMedian([4,2,3,1], 2)","expected":"[3.0, 2.5, 2.0]"}]},{"title":"Top K Frequent Elements","slug":"top-k-frequent","description":"Return the k most frequent elements (order of output sorted ascending for determinism).","visible_skeleton":"func TopKFrequent(nums []int, k int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"TopKFrequent([1,1,1,2,2,3], 2)","expected":"[1, 2]"},{"call":"TopKFrequent([1], 1)","expected":"[1]"},{"call":"TopKFrequent([4,1,-1,2,-1,2,3], 2)","expected":"[-1, 2]"},{"call":"TopKFrequent([1,2,3,4,5,6], 3)","expected":"[1, 2, 3]"},{"call":"TopKFrequent([1,1,2,2,3,3], 1)","expected":"[1]"},{"call":"TopKFrequent([0,0,0,0], 1)","expected":"[0]"},{"call":"TopKFrequent([5,5,5,6,6,7], 2)","expected":"[5, 6]"},{"call":"TopKFrequent([2,2,2,2,2], 1)","expected":"[2]"},{"call":"TopKFrequent([1,2,2,3,3,3], 2)","expected":"[2, 3]"},{"call":"TopKFrequent([9,8,7,6,5,4,3,2,1], 4)","expected":"[1, 2, 3, 4]"}]},{"title":"Merge k Sorted Lists (as arrays)","slug":"merge-k-sorted-lists-arr","description":"Given k sorted slices of ints, merge into one sorted slice.","visible_skeleton":"func MergeKSorted(lists [][]int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"MergeKSorted([[1, 4, 5], [1, 3, 4], [2, 6]])","expected":"[1, 1, 2, 3, 4, 4, 5, 6]"},{"call":"MergeKSorted([[], []])","expected":"[]"},{"call":"MergeKSorted([[1], [0]])","expected":"[0, 1]"},{"call":"MergeKSorted([[2, 4, 6], [1, 3, 5]])","expected":"[1, 2, 3, 4, 5, 6]"},{"call":"MergeKSorted([[1, 2, 3], [], [4, 5, 6]])","expected":"[1, 2, 3, 4, 5, 6]"},{"call":"MergeKSorted([[-3, -1], [0, 2], [1, 4, 7]])","expected":"[-3, -1, 0, 1, 2, 4, 7]"},{"call":"MergeKSorted([[1, 1, 1], [1, 1], [1]])","expected":"[1, 1, 1, 1, 1, 1]"},{"call":"MergeKSorted([[5, 10], [2, 3, 12, 14]])","expected":"[2, 3, 5, 10, 12, 14]"},{"call":"MergeKSorted([[0], [1], [2], [3]])","expected":"[0, 1, 2, 3]"},{"call":"MergeKSorted([[]])","expected":"[]"}]},{"title":"Smallest Range Covering Elements from k Lists","slug":"smallest-range-k-lists","description":"Given k sorted lists, return the smallest inclusive range [l,r] that contains at least one number from each list.","visible_skeleton":"func SmallestRangeKLists(lists [][]int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"SmallestRangeKLists([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])","expected":"[20, 24]"},{"call":"SmallestRangeKLists([[1, 2, 3], [1, 2, 3], [1, 2, 3]])","expected":"[1, 1]"},{"call":"SmallestRangeKLists([[1], [2], [3]])","expected":"[1, 3]"},{"call":"SmallestRangeKLists([[1, 5, 8], [4, 12], [7, 8, 10]])","expected":"[4, 7]"},{"call":"SmallestRangeKLists([[10, 10], [10, 10]])","expected":"[10, 10]"},{"call":"SmallestRangeKLists([[-5, 0, 5], [2, 3, 4], [6, 7, 8]])","expected":"[4, 6]"},{"call":"SmallestRangeKLists([[1, 9], [4, 10, 15, 24, 26]])","expected":"[9, 10]"},{"call":"SmallestRangeKLists([[1, 2], [3, 4], [5, 6], [7, 8]])","expected":"[2, 7]"},{"call":"SmallestRangeKLists([[1, 2, 3, 4], [2, 3, 4, 5]])","expected":"[2, 2]"},{"call":"SmallestRangeKLists([[0, 1, 2], [3, 4, 5], [6, 7, 8]])","expected":"[2, 6]"}]},{"title":"Subsets (Power Set)","slug":"subsets","description":"Return all subsets of nums, with elements in non-decreasing order and subsets sorted lexicographically.","visible_skeleton":"func Subsets(nums []int) [][]int {\n\treturn nil\n}\n","test_cases":[{"call":"Subsets([1,2,3])","expected":"[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"},{"call":"Subsets([0])","expected":"[[], [0]]"},{"call":"Subsets([1,1,2])","expected":"[[], [1], [1], [1, 1], [2], [1, 2], [1, 2], [1, 1, 2]]"},{"call":"Subsets([2,2])","expected":"[[], [2], [2], [2, 2]]"},{"call":"Subsets([1,2,2,3])","expected":"[[], [1], [2], [1, 2], [2], [1, 2], [2, 2], [1, 2, 2], [3], [1, 3], [2, 3], [1, 2, 3], [2, 3], [1, 2, 3], [2, 2, 3], [1, 2, 2, 3]]"},{"call":"Subsets([])","expected":"[[]]"},{"call":"Subsets([5])","expected":"[[], [5]]"},{"call":"Subsets([1,3,5])","expected":"[[], [1], [3], [1, 3], [5], [1, 5], [3, 5], [1, 3, 5]]"},{"call":"Subsets([9,8])","expected":"[[], [8], [9], [8, 9]]"},{"call":"Subsets([1,2,3,4])","expected":"[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]"}]},{"title":"Combination Sum","slug":"combination-sum","description":"Return unique combinations where candidates sum to target. Reuse allowed. Subsets sorted lexicographically.","visible_skeleton":"func CombinationSum(candidates []int, target int) [][]int {\n\treturn nil\n}\n","test_cases":[{"call":"CombinationSum([2,3,6,7], 7)","expected":"[[2, 2, 3], [7]]"},{"call":"CombinationSum([2,3,5], 8)","expected":"[[2, 2, 2, 2], [2, 3, 3], [3, 5]]"},{"call":"CombinationSum([2], 1)","expected":"[]"},{"call":"CombinationSum([1], 1)","expected":"[[1]]"},{"call":"CombinationSum([2], 2)","expected":"[[2]]"},{"call":"CombinationSum([3,4,5], 9)","expected":"[[3, 3, 3], [4, 5]]"},{"call":"CombinationSum([2,7,6,3,5,1], 9)","expected":"[[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 5], [1, 1, 1, 2, 2, 2], [1, 1, 1, 3, 3], [1, 1, 1, 6], [1, 1, 2, 2, 3], [1, 1, 2, 5], [1, 1, 7], [1, 2, 2, 2, 2], [1, 2, 3, 3], [1, 2, 6], [1, 3, 5], [2, 2, 2, 3], [2, 2, 5], [2, 7], [3, 3, 3], [3, 6]]"},{"call":"CombinationSum([8,7,4,3], 11)","expected":"[[3, 4, 4], [3, 8], [4, 7]]"},{"call":"CombinationSum([9,3,4,7], 7)","expected":"[[3, 4], [7]]"},{"call":"CombinationSum([10,1,2,7,6,1,5], 8)","expected":"[[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 2, 2], [1, 1, 1, 5], [1, 1, 2, 2, 2], [1, 1, 6], [1, 2, 5], [1, 7], [2, 2, 2, 2], [2, 6]]"}]},{"title":"N-Queens (Count Solutions)","slug":"n-queens-count","description":"Return the number of distinct solutions for n-queens.","visible_skeleton":"func NQueensCount(n int) int {\n\treturn 0\n}\n","test_cases":[{"call":"NQueensCount(1)","expected":"1"},{"call":"NQueensCount(2)","expected":"0"},{"call":"NQueensCount(3)","expected":"0"},{"call":"NQueensCount(4)","expected":"2"},{"call":"NQueensCount(5)","expected":"10"},{"call":"NQueensCount(6)","expected":"4"},{"call":"NQueensCount(7)","expected":"40"},{"call":"NQueensCount(8)","expected":"92"},{"call":"NQueensCount(9)","expected":"352"},{"call":"NQueensCount(10)","expected":"724"}]},{"title":"Word Search (exist)","slug":"word-search-exist","description":"Return true if the word exists in the board moving 4-directions without reusing a cell.","visible_skeleton":"func WordSearchExist(board []string, word string) bool {\n\treturn false\n}\n","test_cases":[{"call":"WordSearchExist([\"ABCE\", \"SFCS\", \"ADEE\"], \"ABCCED\")","expected":"true"},{"call":"WordSearchExist([\"ABCE\", \"SFCS\", \"ADEE\"], \"SEE\")","expected":"true"},{"call":"WordSearchExist([\"ABCE\", \"SFCS\", \"ADEE\"], \"ABCB\")","expected":"false"},{"call":"WordSearchExist([\"A\"], \"A\")","expected":"true"},{"call":"WordSearchExist([\"A\"], \"B\")","expected":"false"},{"call":"WordSearchExist([\"CAADE\", \"COLAB\", \"TAXYZ\"], \"CODE\")","expected":"false"},{"call":"WordSearchExist([\"AAAA\", \"AAAA\", \"AAAA\"], \"AAAAA\")","expected":"true"},{"call":"WordSearchExist([\"CAT\", \"DOG\", \"PIG\"], \"COD\")","expected":"false"},{"call":"WordSearchExist([\"XY\", \"YZ\"], \"XYZ\")","expected":"true"},{"call":"WordSearchExist([\"ABC\", \"DEF\", \"GHI\"], \"AEI\")","expected":"false"}]},{"title":"Search in Rotated Sorted Array","slug":"search-rotated","description":"Return index of target or -1 if not found.","visible_skeleton":"func SearchRotated(nums []int, target int) int {\n\treturn -1\n}\n","test_cases":[{"call":"SearchRotated([4,5,6,7,0,1,2], 0)","expected":"4"},{"call":"SearchRotated([4,5,6,7,0,1,2], 3)","expected":"-1"},{"call":"SearchRotated([1], 0)","expected":"-1"},{"call":"SearchRotated([1], 1)","expected":"0"},{"call":"SearchRotated([1,3], 3)","expected":"1"},{"call":"SearchRotated([5,1,3], 5)","expected":"0"},{"call":"SearchRotated([5,1,3], 1)","expected":"1"},{"call":"SearchRotated([6,7,1,2,3,4,5], 4)","expected":"5"},{"call":"SearchRotated([], 3)","expected":"-1"},{"call":"SearchRotated([1,2,3,4,5], 4)","expected":"3"}]},{"title":"Find Peak Element","slug":"find-peak-element","description":"Return any peak index.","visible_skeleton":"func FindPeakElement(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"FindPeakElement([1,2,3,1])","expected":"2"},{"call":"FindPeakElement([1,2,1,3,5,6,4])","expected":"5"},{"call":"FindPeakElement([1])","expected":"0"},{"call":"FindPeakElement([2,1])","expected":"0"},{"call":"FindPeakElement([1,2])","expected":"1"},{"call":"FindPeakElement([1,1,1])","expected":"0"},{"call":"FindPeakElement([1,3,2,1])","expected":"1"},{"call":"FindPeakElement([1,2,3,4,5])","expected":"4"},{"call":"FindPeakElement([5,4,3,2,1])","expected":"0"},{"call":"FindPeakElement([1,2,1,2,1])","expected":"3"}]},{"title":"Single Number (XOR)","slug":"single-number-xor","description":"Find the element that appears once when every other element appears exactly twice.","visible_skeleton":"func SingleNumber(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"SingleNumber([2,2,1])","expected":"1"},{"call":"SingleNumber([4,1,2,1,2])","expected":"4"},{"call":"SingleNumber([1])","expected":"1"},{"call":"SingleNumber([0,1,0,1,0])","expected":"0"},{"call":"SingleNumber([-1,-1,-2])","expected":"-2"},{"call":"SingleNumber([99])","expected":"99"},{"call":"SingleNumber([7,7,8])","expected":"8"},{"call":"SingleNumber([10,10,20])","expected":"20"},{"call":"SingleNumber([5,4,5,4,3])","expected":"3"},{"call":"SingleNumber([100,200,100])","expected":"200"}]},{"title":"Maximum XOR of Two Numbers in an Array","slug":"max-xor-pair","description":"Return the maximum XOR of any two numbers.","visible_skeleton":"func MaximumXOR(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MaximumXOR([3,10,5,25,2,8])","expected":"28"},{"call":"MaximumXOR([0])","expected":"0"},{"call":"MaximumXOR([2,4])","expected":"6"},{"call":"MaximumXOR([8,10,2])","expected":"10"},{"call":"MaximumXOR([14,70,53,83,49,91,36,80,92,51,66,70])","expected":"127"},{"call":"MaximumXOR([1,1,1])","expected":"0"},{"call":"MaximumXOR([5,6,7,8])","expected":"15"},{"call":"MaximumXOR([10,20,30,40])","expected":"60"},{"call":"MaximumXOR([1,2,3,4,5])","expected":"7"},{"call":"MaximumXOR([9,8,7,6])","expected":"15"}]},{"title":"Interval Scheduling (Max Non-Overlapping)","slug":"interval-scheduling","description":"Return maximum number of non-overlapping intervals.","visible_skeleton":"func MaxNonOverlappingIntervals(intervals [][]int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MaxNonOverlappingIntervals([[1, 2], [2, 3], [3, 4], [1, 3]])","expected":"3"},{"call":"MaxNonOverlappingIntervals([[1, 2], [2, 3]])","expected":"2"},{"call":"MaxNonOverlappingIntervals([[1, 2], [1, 2], [1, 2]])","expected":"1"},{"call":"MaxNonOverlappingIntervals([[1, 2], [2, 3], [3, 4]])","expected":"3"},{"call":"MaxNonOverlappingIntervals([[1, 3], [2, 4], [3, 5], [7, 8]])","expected":"3"},{"call":"MaxNonOverlappingIntervals([[1, 10]])","expected":"1"},{"call":"MaxNonOverlappingIntervals([])","expected":"0"},{"call":"MaxNonOverlappingIntervals([[0, 0], [0, 1], [1, 1]])","expected":"3"},{"call":"MaxNonOverlappingIntervals([[1, 2], [2, 2], [2, 3], [3, 3]])","expected":"4"},{"call":"MaxNonOverlappingIntervals([[-1, 1], [0, 2], [1, 3]])","expected":"2"}]},{"title":"Jump Game II (Min Jumps)","slug":"jump-game-ii","description":"Given nums where each element is max jump length, return minimal number of jumps to reach last index.","visible_skeleton":"func JumpGameII(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"JumpGameII([2,3,1,1,4])","expected":"2"},{"call":"JumpGameII([2,3,0,1,4])","expected":"2"},{"call":"JumpGameII([1,2,3])","expected":"2"},{"call":"JumpGameII([1])","expected":"0"},{"call":"JumpGameII([0])","expected":"0"},{"call":"JumpGameII([1,1,1,1])","expected":"3"},{"call":"JumpGameII([3,2,1])","expected":"1"},{"call":"JumpGameII([2,1])","expected":"1"},{"call":"JumpGameII([1,0,1,0])","expected":"2"},{"call":"JumpGameII([5,9,3,2,1,0,2,3,3,1,0,0])","expected":"3"}]},{"title":"Trie (Insert/Search/StartsWith Simulation)","slug":"trie-sim","description":"Given ops and words arrays of same length, perform operations and return outputs as strings (\"null\" for insert).","visible_skeleton":"func TrieSim(ops []string, words []string) []string {\n\treturn nil\n}\n","test_cases":[{"call":"TrieSim([\"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"], [\"apple\", \"apple\", \"app\", \"app\", \"app\", \"app\"])","expected":"[\"null\", \"true\", \"false\", \"true\", \"null\", \"true\"]"},{"call":"TrieSim([\"insert\", \"startsWith\", \"search\"], [\"hello\", \"he\", \"hello\"])","expected":"[\"null\", \"true\", \"true\"]"},{"call":"TrieSim([\"search\"], [\"nope\"])","expected":"[\"false\"]"},{"call":"TrieSim([\"insert\", \"insert\", \"search\", \"startsWith\"], [\"a\", \"ab\", \"a\", \"abc\"])","expected":"[\"null\", \"null\", \"true\", \"false\"]"},{"call":"TrieSim([\"insert\", \"search\", \"startsWith\", \"startsWith\"], [\"aa\", \"aaa\", \"a\", \"aa\"])","expected":"[\"null\", \"false\", \"true\", \"true\"]"},{"call":"TrieSim([\"insert\", \"insert\", \"insert\", \"search\", \"search\"], [\"dog\", \"deer\", \"deal\", \"dog\", \"de\"])","expected":"[\"null\", \"null\", \"null\", \"true\", \"false\"]"},{"call":"TrieSim([\"startsWith\"], [\"z\"])","expected":"[\"false\"]"},{"call":"TrieSim([\"insert\", \"search\"], [\"x\", \"y\"])","expected":"[\"null\", \"false\"]"},{"call":"TrieSim([\"insert\", \"search\", \"search\"], [\"zoo\", \"zoo\", \"zo\"])","expected":"[\"null\", \"true\", \"false\"]"},{"call":"TrieSim([\"insert\", \"startsWith\"], [\"pre\", \"prefix\"])","expected":"[\"null\", \"false\"]"}]},{"title":"Word Search II (find words)","slug":"word-search-ii","description":"Given board and words, return the list of found words (sorted).","visible_skeleton":"func FindWordsInBoard(board []string, words []string) []string {\n\treturn nil\n}\n","test_cases":[{"call":"FindWordsInBoard([\"oaan\", \"etae\", \"ihkr\", \"iflv\"], [\"oath\", \"pea\", \"eat\", \"rain\"])","expected":"[\"eat\", \"oath\"]"},{"call":"FindWordsInBoard([\"ab\", \"cd\"], [\"ab\", \"abcd\", \"ad\", \"bc\"])","expected":"[\"ab\"]"},{"call":"FindWordsInBoard([\"aaaa\", \"aaaa\", \"aaaa\"], [\"aaaa\", \"aaaaa\", \"aaaaaa\"])","expected":"[\"aaaa\", \"aaaaa\", \"aaaaaa\"]"},{"call":"FindWordsInBoard([\"cat\", \"dog\", \"pig\"], [\"cat\", \"dog\", \"cop\", \"dig\"])","expected":"[\"cat\", \"dog\"]"},{"call":"FindWordsInBoard([\"a\"], [\"a\", \"b\"])","expected":"[\"a\"]"},{"call":"FindWordsInBoard([\"go\", \"on\"], [\"go\", \"gon\", \"no\"])","expected":"[\"go\", \"gon\", \"no\"]"},{"call":"FindWordsInBoard([\"xyz\", \"yzx\", \"zxy\"], [\"xyz\", \"yzx\", \"zxy\", \"xy\"])","expected":"[\"xy\", \"xyz\", \"yzx\", \"zxy\"]"},{"call":"FindWordsInBoard([\"abc\", \"bcd\", \"cde\"], [\"abc\", \"bcd\", \"cde\", \"ace\"])","expected":"[\"abc\", \"bcd\", \"cde\"]"},{"call":"FindWordsInBoard([\"aab\", \"aba\"], [\"aab\", \"aba\", \"baa\"])","expected":"[\"aab\", \"aba\", \"baa\"]"},{"call":"FindWordsInBoard([\"doaf\", \"agai\", \"dcan\"], [\"dog\", \"dad\", \"dgdg\", \"can\", \"again\"])","expected":"[\"again\", \"can\", \"dad\", \"dog\"]"}]},{"title":"Course Schedule II (Topo Order)","slug":"course-schedule-ii","description":"Return one valid order of courses or empty slice if impossible.","visible_skeleton":"func FindOrder(numCourses int, prerequisites [][]int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"FindOrder(2, [[1, 0]])","expected":"[0, 1]"},{"call":"FindOrder(4, [[1, 0], [2, 0], [3, 1], [3, 2]])","expected":"[0, 1, 2, 3]"},{"call":"FindOrder(1, [])","expected":"[0]"},{"call":"FindOrder(3, [[1, 0], [1, 2]])","expected":"[0, 2, 1]"},{"call":"FindOrder(3, [[1, 0], [2, 1]])","expected":"[0, 1, 2]"},{"call":"FindOrder(2, [[0, 1], [1, 0]])","expected":"[]"},{"call":"FindOrder(5, [[1, 4], [2, 4], [3, 1], [3, 2]])","expected":"[0, 4, 1, 2, 3]"},{"call":"FindOrder(3, [])","expected":"[0, 1, 2]"},{"call":"FindOrder(4, [[0, 1], [0, 2], [1, 2], [2, 3]])","expected":"[3, 2, 1, 0]"},{"call":"FindOrder(6, [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4]])","expected":"[0, 1, 2, 3, 4, 5]"}]},{"title":"Alien Dictionary (Topo of Characters)","slug":"alien-dictionary","description":"Given sorted words in an alien language, return a possible character order (empty string if invalid).","visible_skeleton":"func AlienOrder(words []string) string {\n\treturn \"\"\n}\n","test_cases":[{"call":"AlienOrder([\"wrt\", \"wrf\", \"er\", \"ett\", \"rftt\"])","expected":"\"wertf\""},{"call":"AlienOrder([\"z\", \"x\"])","expected":"\"zx\""},{"call":"AlienOrder([\"z\", \"x\", \"z\"])","expected":"\"\""},{"call":"AlienOrder([\"abc\", \"ab\"])","expected":"\"\""},{"call":"AlienOrder([\"abc\", \"abx\", \"abxy\", \"abxyz\"])","expected":"\"abyzcx\""},{"call":"AlienOrder([\"ba\", \"bc\", \"ac\", \"cab\"])","expected":"\"bac\""},{"call":"AlienOrder([\"a\", \"b\", \"c\"])","expected":"\"abc\""},{"call":"AlienOrder([\"ab\", \"adc\"])","expected":"\"acbd\""},{"call":"AlienOrder([\"xza\", \"ayh\", \"ples\", \"plares\", \"plar\"])","expected":"\"\""},{"call":"AlienOrder([\"aa\", \"aa\"])","expected":"\"a\""}]},{"title":"Graph Valid Tree (Union-Find)","slug":"graph-valid-tree","description":"Return true if edges form a valid tree on n nodes.","visible_skeleton":"func ValidTree(n int, edges [][]int) bool {\n\treturn false\n}\n","test_cases":[{"call":"ValidTree(5, [[0, 1], [0, 2], [0, 3], [1, 4]])","expected":"true"},{"call":"ValidTree(5, [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]])","expected":"false"},{"call":"ValidTree(1, [])","expected":"true"},{"call":"ValidTree(2, [[0, 1]])","expected":"true"},{"call":"ValidTree(2, [])","expected":"false"},{"call":"ValidTree(4, [[0, 1], [2, 3]])","expected":"false"},{"call":"ValidTree(4, [[0, 1], [1, 2], [2, 3]])","expected":"true"},{"call":"ValidTree(3, [[0, 1], [1, 2], [2, 0]])","expected":"false"},{"call":"ValidTree(6, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])","expected":"true"},{"call":"ValidTree(6, [[0, 1], [2, 3], [3, 4], [4, 2], [5, 0]])","expected":"false"}]},{"title":"Redundant Connection (Union-Find)","slug":"redundant-connection","description":"Given edges of a graph with one extra edge added to a tree, return the redundant edge that creates a cycle.","visible_skeleton":"func RedundantConnection(edges [][]int) []int {\n\treturn nil\n}\n","test_cases":[{"call":"RedundantConnection([[1, 2], [1, 3], [2, 3]])","expected":"[2, 3]"},{"call":"RedundantConnection([[1, 2], [2, 3], [3, 4], [1, 4], [1, 5]])","expected":"[1, 4]"},{"call":"RedundantConnection([[1, 2], [2, 3], [3, 1]])","expected":"[3, 1]"},{"call":"RedundantConnection([[1, 2]])","expected":"[]"},{"call":"RedundantConnection([[1, 2], [2, 3], [3, 4], [4, 1], [1, 5]])","expected":"[4, 1]"},{"call":"RedundantConnection([[1, 2], [3, 4], [1, 3], [2, 4], [2, 3]])","expected":"[2, 4]"},{"call":"RedundantConnection([[9, 10], [5, 8], [2, 6], [1, 5], [3, 8], [4, 9], [8, 9]])","expected":"[]"},{"call":"RedundantConnection([[1, 2], [2, 3], [4, 5], [5, 6], [6, 4]])","expected":"[6, 4]"},{"call":"RedundantConnection([[1, 3], [3, 4], [1, 2], [2, 4], [4, 5]])","expected":"[2, 4]"},{"call":"RedundantConnection([[1, 2], [1, 3], [2, 3], [3, 4]])","expected":"[2, 3]"}]},{"title":"Longest Consecutive Sequence","slug":"longest-consecutive-seq","description":"Return the length of the longest consecutive sequence.","visible_skeleton":"func LongestConsecutive(nums []int) int {\n\treturn 0\n}\n","test_cases":[{"call":"LongestConsecutive([100,4,200,1,3,2])","expected":"4"},{"call":"LongestConsecutive([0,3,7,2,5,8,4,6,0,1])","expected":"9"},{"call":"LongestConsecutive([])","expected":"0"},{"call":"LongestConsecutive([1])","expected":"1"},{"call":"LongestConsecutive([9,1,4,7,3,-1,0,5,8,-1,6])","expected":"7"},{"call":"LongestConsecutive([1,2,0,1])","expected":"3"},{"call":"LongestConsecutive([10,5,12,3,55,30,4,11,2])","expected":"4"},{"call":"LongestConsecutive([1,3,5,2,4,6,7,8,9])","expected":"9"},{"call":"LongestConsecutive([9,8,7,6,5])","expected":"5"},{"call":"LongestConsecutive([0])","expected":"1"}]},{"title":"Contains Duplicate III (Ordered Set)","slug":"contains-duplicate-iii","description":"Return true if there exist i!=j with |i-j|<=k and |nums[i]-nums[j]|<=t.","visible_skeleton":"func ContainsNearbyAlmostDuplicate(nums []int, k int, t int) bool {\n\treturn false\n}\n","test_cases":[{"call":"ContainsNearbyAlmostDuplicate([1,2,3,1], 3, 0)","expected":"true"},{"call":"ContainsNearbyAlmostDuplicate([1,5,9,1,5,9], 2, 3)","expected":"false"},{"call":"ContainsNearbyAlmostDuplicate([1,2], 0, 1)","expected":"false"},{"call":"ContainsNearbyAlmostDuplicate([1,2], 1, 0)","expected":"false"},{"call":"ContainsNearbyAlmostDuplicate([1,2,3,1], 3, 3)","expected":"true"},{"call":"ContainsNearbyAlmostDuplicate([0], 1, 2)","expected":"false"},{"call":"ContainsNearbyAlmostDuplicate([7,1,3], 2, 3)","expected":"true"},{"call":"ContainsNearbyAlmostDuplicate([1,2,3,4,5,6], 2, 2)","expected":"true"},{"call":"ContainsNearbyAlmostDuplicate([1,0,1,1], 1, 2)","expected":"true"},{"call":"ContainsNearbyAlmostDuplicate([2147483640,2147483641], 1, 1)","expected":"true"}]},{"title":"Subarray Sum Equals K (Count)","slug":"subarray-sum-equals-k","description":"Return the total number of continuous subarrays whose sum equals k.","visible_skeleton":"func SubarraySumEqualsK(nums []int, k int) int {\n\treturn 0\n}\n","test_cases":[{"call":"SubarraySumEqualsK([1,1,1], 2)","expected":"2"},{"call":"SubarraySumEqualsK([1,2,3], 3)","expected":"2"},{"call":"SubarraySumEqualsK([1], 0)","expected":"0"},{"call":"SubarraySumEqualsK([0,0,0], 0)","expected":"6"},{"call":"SubarraySumEqualsK([3,4,7,2,-3,1,4,2], 7)","expected":"4"},{"call":"SubarraySumEqualsK([1,-1,1,-1], 0)","expected":"4"},{"call":"SubarraySumEqualsK([100,-100,100,-100], 0)","expected":"4"},{"call":"SubarraySumEqualsK([1,2,1,2,1], 3)","expected":"4"},{"call":"SubarraySumEqualsK([], 0)","expected":"0"},{"call":"SubarraySumEqualsK([10,2,-2,-20,10], -10)","expected":"3"}]},{"title":"Maximum Size Subarray Sum Equals K","slug":"max-size-subarray-sum-k","description":"Return the maximum length of a subarray that sums to k.","visible_skeleton":"func MaxSizeSubarraySumK(nums []int, k int) int {\n\treturn 0\n}\n","test_cases":[{"call":"MaxSizeSubarraySumK([1,-1,5,-2,3], 3)","expected":"4"},{"call":"MaxSizeSubarraySumK([-2,-1,2,1], 1)","expected":"2"},{"call":"MaxSizeSubarraySumK([1,1,1,1], 2)","expected":"2"},{"call":"MaxSizeSubarraySumK([0,0,0], 0)","expected":"3"},{"call":"MaxSizeSubarraySumK([3,1,-1,1,1,1], 3)","expected":"5"},{"call":"MaxSizeSubarraySumK([1,-1], 0)","expected":"2"},{"call":"MaxSizeSubarraySumK([2,-1,2], 3)","expected":"3"},{"call":"MaxSizeSubarraySumK([1,2,3], 3)","expected":"2"},{"call":"MaxSizeSubarraySumK([1,2,3], 7)","expected":"0"},{"call":"MaxSizeSubarraySumK([], 0)","expected":"0"}]}]}
